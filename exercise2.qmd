---
title: "expercise2"
author: "Lukas Bieri (bieriluk)"
date: "05.01.2023"
format: html
editor: source
---
# Exercise 2 -  Computational Movement Analysis: Patterns and Trends in Environmental Data

## 1. Information & Metadata

### 1.1 Information

**Study program:** MSc in Environment and Natural Resources FS23

**Module:** Computational Movement Analysis: Patterns and Trends in Environmental Data

**Course:** R Exercise 2 - Week 2

**Lecturers:** Patrick Laube (laup), Nils Ratnaweera (rata) & Dominic Lüönd (luoe)

**Authors:** Lukas Bieri (bieriluk)


### 1.1 Structure R-Project

The following project was created for the exercise:
cma-week2-rexercise

Data was stored in the folder "datasets".

Code and explanations in this Quarto-File where stored and submitted via the public GitHub Repo "bieriluk/cma-week2":
https://github.com/bieriluk/cma-week2.git


### 1.2 Data

Data for the exercise was provided by the teaching staff via the plattform "Moodle". 

The data originates from the ZHAW Research Projekt "Using an acoustic signal to prevent wild boars from damaging crops"
https://www.zhaw.ch/en/about-us/news/news-releases/news-detail/event-news/using-an-acoustic-signal-to-prevent-wild-boars-from-damaging-crops/

The following datasets were used:

1.  File: "wildschwein_BE_2056.csv"
    Downloaded: 28.04.2023
    Source: https://moodle.zhaw.ch/pluginfile.php/1168373/mod_folder/content/0/wildschwein_BE_2056.csv?forcedownload=1
    
Information on the R Exercise can be found here:
https://computationalmovementanalysis.github.io/FS23/

These R Exercises are created by Patrick Laube, Nils Ratnaweera, Nikolaos Bakogiannis and Dominic Lüönd for the Course Computational Movement Analysis and are licensed under Creative Commons Attribution 4.0 International License.


### 1.4 Used Software

**R version 4.2.1 (2022-06-23 ucrt)** -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

**RStudio 2023.03.0+386** "Cherry Blossom" Release (3c53477afb13ab959aeb5b34df1f10c237b256c3, 2023-03-09) for Windows
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) RStudio/2023.03.0+386 Chrome/108.0.5359.179 Electron/22.0.3 Safari/537.36

**Gitfor WindowsVersion 2.40.1**


## 2. Task 1: Import your data

### 2.1 Preparation

In Preparation: Restart R and clear console.

Then: Load necessary functions

```{r}
library("readr") # to import tabular data (e.g. csv)
library("dplyr") # to manipulate (tabular) data
library("ggplot2") # to visualize data
library("sf")
```


### 2.2 Import wild boar data & convert with to spatial data
```{r}

wildschwein_BE <- read_delim("datasets/wildschwein_BE_2056.csv", ",")

wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)

wildschwein_BE
```
We need N & E later, so add remove = FALSE to not remove them wehn adding geometry


## 3. Task 2: Getting an overview

### 3.1 How many individuals were tracked 
```{r}
wildschwein_BE$TierName |> unique()
```
--> 3 Individuals, Sabi, Ruth and Rosa

### 3.2 For how long were the individual tracked? Are there gaps? Were all individuals tracked concurrently or sequentially?
```{r}
ggplot(wildschwein_BE, aes(DatetimeUTC, TierName)) +
  geom_point()

head(wildschwein_BE)
tail(wildschwein_BE)
```
The time of tracking differs between the individuals, the overlap for the most part, whereas tracking of "Sabi" starte much earlier than "Rosa" and "Ruth" and the tracking of "Rosa" ended earlier than "Ruth and "Sabi". The time frame overall is between End of August 2014 till the End of July 2015.
No relevant / longer gaps acc. to a quick plot.

### 3.3 What is the temporal sampling interval between the locations?
```{r}
wildschwein_BE <- group_by(wildschwein_BE, TierID)

wildschwein_BE <- mutate(wildschwein_BE, timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)))

wildschwein_BE
```


```{r}
tail(wildschwein_BE)
mean(wildschwein_BE$timelag, na.rm = TRUE)
median(wildschwein_BE$timelag, na.rm = TRUE)
min(wildschwein_BE$timelag, na.rm = TRUE)
max(wildschwein_BE$timelag, na.rm = TRUE)

ggplot(wildschwein_BE, aes(timelag/60)) +
  geom_histogram(binwidth = 1) +
  lims(x = c(0, 5000/60)) +
  scale_y_log10()

wildschwein_BE |> 
  filter(DatetimeUTC > "2014-08-28" & DatetimeUTC < "2014-08-30") |> 
  ggplot(aes(DatetimeUTC, timelag, colour = TierName)) +
  geom_point() + 
  geom_line()
```

The time between samples is mostly around 900s or 15min (median = 903s), however this an vary in both directions (min = 12s, max = 60367s) but a good number of timelags are significantly longer (mean = 1407.72s).

The histogram shows groups of sampling regimes, so the sampling device was most likely set to sample every 5min, 15min, 30min, 45min, 60min and 75min depending on certain parameters.

If we look at individual days, we see that the sampling rate is different during day and night, possibly set this way due the boars beeing hidden during the day and come out during the night.


## 4. Task 3: Deriving movement parameters I: Speed

### 4.1 Calculate Euclidian Distance

Calculate Euclidian Distance by useing dummy values from the data set first before using all data
```{r}
N1 <- 1204752
N2 <- 1204863
E1 <- 2570409
E2 <- 2570402

sqrt((E1-E2)^2 + (N1-N2)^2)

```
111.2205m between the positions in this example.
--> Formula works, implement it in the data frame

```{r}
wildschwein_BE <- wildschwein_BE |> 
  group_by(TierName) |> 
  mutate(steplength_m = sqrt((E-lead(E,1))^2 + (N-lead(N,1))^2))
wildschwein_BE
```
Calculate the distance traveled between two consecutive positions (steplength) for the whole data frame (result in m) using the formula for the Euclidean distance and the function lead()


```{r}
wildschwein_BE |> 
  mutate(speed_ms = steplength_m/timelag)
```
Calculate the speed by dividing distance traveled (steplenth) with time between measements (timelag). Result in m/s.


## 5. Task 4: Cross-scale movement analysis

Import the caro dataset & make it into spatial data frame:
```{r}
caro <- read_delim("datasets/caro60.csv", ",")

caro <- st_as_sf(caro, coords = c("E", "N"), crs = 2056, remove = FALSE)

caro
```

Reduce the granularity of sampling interval by selecting every 3rd, 6th and 9th position:
```{r}
caro_3 <- slice(caro, seq(from = 1, to = 200, by = 3))
caro_3

caro_6 <- slice(caro, seq(from = 1, to = 200, by = 6))
caro_6

caro_9 <- slice(caro, seq(from = 1, to = 200, by = 9))
caro_9

nrow(caro)
nrow(caro_3)
nrow(caro_6)
nrow(caro_9)
```


Calculate timelag, steplength and speed for these data sets:
```{r}
caro <- caro |> 
  group_by(TierName) |> 
  mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)*60)) |> 
  mutate(steplength_m = sqrt((E-lead(E,1))^2 + (N-lead(N,1))^2)) |> 
  mutate(speed_ms = steplength_m/timelag)
caro

caro_3 <- caro_3 |> 
  group_by(TierName) |> 
  mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)*60)) |> 
  mutate(steplength_m = sqrt((E-lead(E,1))^2 + (N-lead(N,1))^2)) |> 
  mutate(speed_ms = steplength_m/timelag)
caro_3

caro_6 <- caro_6 |> 
  group_by(TierName) |> 
  mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)*60)) |> 
  mutate(steplength_m = sqrt((E-lead(E,1))^2 + (N-lead(N,1))^2)) |> 
  mutate(speed_ms = steplength_m/timelag)
caro_6

caro_9 <- caro_9 |> 
  group_by(TierName) |> 
  mutate(timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC)*60)) |> 
  mutate(steplength_m = sqrt((E-lead(E,1))^2 + (N-lead(N,1))^2)) |> 
  mutate(speed_ms = steplength_m/timelag)
caro_9
```

Visualize the resampled data sets speed:
```{r}
ggplot() +
  geom_line(data = caro, aes(x = DatetimeUTC, y = speed_ms, color = "1min")) +
  geom_line(data = caro_3, aes(x = DatetimeUTC, y = speed_ms, color = "3min")) +
  geom_line(data = caro_6, aes(x = DatetimeUTC, y = speed_ms, color = "6min")) +
  geom_line(data = caro_9, aes(x = DatetimeUTC, y = speed_ms, color = "9min")) +
  labs(
    x = "time (UTC)",
    y = "speed in m/s", 
    title = "Comparing derived speed at diferent sampling intervals",
    color = "sampling rate"
    )
```
The speed is higher, the lower the sampling rate. What sampling rate is appropriate will depend on the research question to be answered.

Visualize the resampled data sets trajectories
```{r}
ggplot() +
  geom_point(data = caro, aes(x = E, y = N, color = "1min")) +
  geom_point(data = caro_3, aes(x = E, y = N, color = "3min")) +
  geom_path(data = caro, aes(x = E, y = N, color = "1min")) +
  geom_path(data = caro_3, aes(x = E, y = N, color = "3min")) +
  labs(
    x = "E",
    y = "N", 
    title = "Comparing original data with 3 minutes resampled data",
    color = "trajectory"
    )

ggplot() +
  geom_point(data = caro, aes(x = E, y = N, color = "1min")) +
  geom_point(data = caro_6, aes(x = E, y = N, color = "6min")) +
  geom_path(data = caro, aes(x = E, y = N, color = "1min")) +
  geom_path(data = caro_6, aes(x = E, y = N, color = "6min")) +
  labs(
    x = "E",
    y = "N", 
    title = "Comparing original data with 6 minutes resampled data",
    color = "trajectory"
    )

ggplot() +
  geom_point(data = caro, aes(x = E, y = N, color = "1min")) +
  geom_point(data = caro_9, aes(x = E, y = N, color = "9min")) +
  geom_path(data = caro, aes(x = E, y = N, color = "1min")) +
  geom_path(data = caro_9, aes(x = E, y = N, color = "9min")) +
  labs(
    x = "E",
    y = "N", 
    title = "Comparing original data with 9 minutes resampled data",
    color = "trajectory"
    )
```
Resampled data at 3min and 6min intervalls still show the trajetories more or less accurate in themes of where the animal went. At 9 minutes of resampling, the trajectories still show all the places where the animal spent a lot of time but loses large movements that where quicker.


## 6. Task 5 (optional): Deriving movement parameters II: Rolling window functions


## 7. Task 6: Add your movement data to your repository


## 8. Task 7: Explore your movement data


## 9. Submission


